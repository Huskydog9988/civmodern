plugins {
    id("com.github.johnrengelman.shadow") version "7.1.2"
}

architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfig "civmodern.common.mixins.json"
        mixinConfig "civmodern.forge.mixins.json"
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common

    // Bizarre hack to make Forge work on Forge 50+
    // https://discord.com/channels/792699517631594506/792701725106634783/1272848116864909314
    configureEach {
        resolutionStrategy.force("net.sf.jopt-simple:jopt-simple:5.0.4")
    }
}

dependencies {
    forge("net.minecraftforge:forge:${rootProject.forge_version}")

    common(project(path: ":common", configuration: "namedElements")) { transitive = false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }

    // Forge doesn't include extras by default
    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.3.6"))
    implementation(include("io.github.llamalad7:mixinextras-forge:0.3.6"))
}

processResources {
    filesMatching("META-INF/mods.toml") {
        expand([
            "mod_issues_url": rootProject.mod_issues_url,
            "copyright_licence": rootProject.copyright_licence,

            "mod_version": rootProject.mod_version,
            "mod_description": rootProject.mod_description,
            "mod_home_url": rootProject.mod_home_url,

            "minecraft_version": rootProject.minecraft_version
        ])
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "forge"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                classifier null
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

import net.fabricmc.loom.task.RemapJarTask

tasks.register("remapCivMc", RemapJarTask) {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "civmc-forge"
    from sourceSets.main.output
    from "../civmc"
}

tasks.register("cleanJar", Delete) {
    delete fileTree("../dist") {
        include "*-forge.jar"
    }
}

tasks.register("copyJar", Copy) {
    dependsOn cleanJar
    from remapJar, remapCivMc
    into "../dist"
}

build.dependsOn copyJar
